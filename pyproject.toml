[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "spax"
version = "0.2.0"
description = "Declarative search-space definition & exploration for ML (HPO, NAS, configs)"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }

authors = [
  { name = "Keyhan Kamyar", email = "keyhankamyar@gmail.com" }
]
maintainers = [
  { name = "Keyhan Kamyar", email = "keyhankamyar@gmail.com" }
]

keywords = [
  "hyperparameter-optimization",
  "machine-learning",
  "deep-learning",
  "hyperparameter-tuning",
  "experiment-tracking",
  "search-space",
  "automl",
  "hpo",
  "neural-architecture-search"
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed"
]

dependencies = [
  "pydantic>=2.7,<3.0"
]

[project.optional-dependencies]
yaml = ["PyYAML>=6.0"]
toml = ["tomli-w>=1.0.0"]
optuna = ["optuna>=3.2,<4"]
docs = [
  "mkdocs>=1.5.0",
  "mkdocs-material>=9.4.0",
  "mkdocstrings[python]>=0.23.0"
]
dev = [
  "pytest>=7.4.0",
  "pytest-cov>=4.1.0",
  "black>=23.0.0",
  "ruff>=0.1.0",
  "mypy>=1.5.0",
  "pre-commit>=3.4.0"
]
# convenient bundle of runtime extras (not including dev/docs tools)
all = [
  "PyYAML>=6.0",
  "tomli-w>=1.0.0",
  "optuna>=3.2,<4",
]

[project.urls]
Homepage = "https://github.com/keyhankamyar/SpaX"
Documentation = "https://github.com/keyhankamyar/SpaX#readme"
Repository = "https://github.com/keyhankamyar/SpaX"
"Bug Tracker" = "https://github.com/keyhankamyar/SpaX/issues"
Changelog = "https://github.com/keyhankamyar/SpaX/releases"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["spax*"]
exclude = ["tests*", "examples*"]

[tool.setuptools.package-data]
spax = ["py.typed"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "--strict-markers",
  "--strict-config",
  "--cov=spax",
  "--cov-report=term-missing",
  "--cov-report=html",
  "--cov-report=xml"
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests"
]

[tool.coverage.run]
source = ["spax"]
omit = [
  "*/tests/*",
  "*/__pycache__/*",
  "*/.pytest_cache/*"
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "@abstractmethod",
  "@overload"
]
precision = 2
show_missing = true

[tool.black]
line-length = 88
target-version = ["py311", "py312", "py313", "py314"]
include = '\\.pyi?$'
extend-exclude = '''
/(
  \.eggs
| \.git
| \.hg
| \.mypy_cache
| \.tox
| \.venv
| _build
| buck-out
| build
| dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py311"
select = ["E","W","F","I","B","C4","UP","ARG","SIM"]
ignore = ["E501","B008","B905"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["ARG"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.ruff.isort]
known-first-party = ["spax"]
force-sort-within-sections = true
